#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=../lib/utils.bash
source "${plugin_dir}/lib/utils.bash"

mkdir -p "$ASDF_DOWNLOAD_PATH"

get_arch() {
  uname -m | tr '[:upper:]' '[:lower:]'
}

get_platform() {
  uname -s | tr '[:upper:]' '[:lower:]'
}

version_ge() {
  printf '%s\n%s\n' "$2" "$1" | sort -V -C
}

get_binary_download_url() {
  local version="$1"
  local platform="$2"
  local arch="$3"
  
  # Convert platform names to match GitHub releases
  case "$platform" in
    darwin) platform="apple-darwin" ;;
    linux) platform="unknown-linux-gnu" ;;
    *) fail "Platform $platform is not supported" ;;
  esac
  
  # Convert arch names to match GitHub releases
  case "$arch" in
    x86_64) arch="x86_64" ;;
    arm64|aarch64) arch="aarch64" ;;
    *) fail "Architecture $arch is not supported" ;;
  esac
  
  echo "https://github.com/NethermindEth/starknet-contract-verifier/releases/download/v${version}/starknet-contract-verifier-v${version}-${arch}-${platform}.tar.gz"
}

get_source_download_url() {
  local version="$1"
  echo "https://github.com/NethermindEth/starknet-contract-verifier/archive/v${version}.tar.gz"
}

platform=$(get_platform)
arch=$(get_arch)

# Use pre-built binaries for v0.4.3 and later, source for older versions
echo "* Checking version $ASDF_INSTALL_VERSION against 0.4.3"
if version_ge "$ASDF_INSTALL_VERSION" "0.4.3"; then
  echo "* Using pre-built binary for version $ASDF_INSTALL_VERSION"
  download_url=$(get_binary_download_url "$ASDF_INSTALL_VERSION" "$platform" "$arch")
  echo "* Downloading voyager binary $ASDF_INSTALL_VERSION..."
  curl "${curl_opts[@]}" -o "$ASDF_DOWNLOAD_PATH/binary.tar.gz" "$download_url" || fail "Could not download $download_url"
  
  echo "* Extracting binary..."
  tar -xzf "$ASDF_DOWNLOAD_PATH/binary.tar.gz" -C "$ASDF_DOWNLOAD_PATH" || fail "Could not extract binary"
  rm "$ASDF_DOWNLOAD_PATH/binary.tar.gz"
  
  # Mark that this is a binary installation
  touch "$ASDF_DOWNLOAD_PATH/.binary_install"
else
  echo "* Using source build for version $ASDF_INSTALL_VERSION"
  download_url=$(get_source_download_url "$ASDF_INSTALL_VERSION")
  echo "* Downloading voyager source $ASDF_INSTALL_VERSION..."
  curl "${curl_opts[@]}" -o "$ASDF_DOWNLOAD_PATH/source.tar.gz" "$download_url" || fail "Could not download $download_url"
  
  echo "* Extracting source..."
  tar -xzf "$ASDF_DOWNLOAD_PATH/source.tar.gz" -C "$ASDF_DOWNLOAD_PATH" --strip-components=1 || fail "Could not extract source"
  rm "$ASDF_DOWNLOAD_PATH/source.tar.gz"
fi